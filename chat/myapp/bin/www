#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
const mysql = require("mysql");
var db = require("../database/db.js");
var record = require("../database/record.js");

var connection = mysql.createConnection(db.mysql);
connection.connect();
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//添加的socket代码
var io = require('socket.io').listen(server);




io.on('connection', function(socket){
  console.log('链接成功');
  //发送给客户端
  socket.emit('news', { data: '连接成功' });
  socket.on('my other event', function (data) {
    // console.log(data.data);
    // connection.query(record.query,1,(err,result)=>{
    //   let jsonResult=[];
    //    jsonResult.push(JSON.stringify(result[0])) ;//转换成JSON去掉 RowDataPacket
    //   jsonResult.push(data.data);
    //   connection.query(record.update,jsonResult,(err,result)=>{
    //     if(err) return console.error(err);
    //     console.log(result);


        
    //   })
    // })
    // connection.query(record.insert,data.data)
    io.emit('my other event', data);
     
  });
  

  //websocket断开
  socket.on('disconnect', function(){
    console.log('user disconnected');

  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
